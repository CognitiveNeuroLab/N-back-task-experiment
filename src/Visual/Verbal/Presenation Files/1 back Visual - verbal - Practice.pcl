int ntrls = 20; # number of trials (needs to be devidable by 5) 
string direc = scenario_directory;

array <int> t_or_nt[ntrls];# array to be filled from pre-made sequence text files
input_file order_in = new input_file;# Read-in the trial order
string file_path = direc + "sequences//" + printf(random(1,50),"n-back_sequence_%d.txt");
#string file_path = direc + "sequences//" + printf(1,"n-back_sequence_%d.txt");
order_in.open(file_path);
order_in.set_delimiter( '\n' ); # for get_line()		
loop
int i = 1; 
until
i > ntrls
begin
	t_or_nt[i] = order_in.get_int();
	i = i+1;
end;

order_in.close();

array <string> letter_array[26];
letter_array[1]  = "\n\n\n\n\n\n\n\nA\n\n\n\n\n\n\n                                                                 ";
letter_array[2]  = "\n\n\n\n\n\n\n\nB\n\n\n\n\n\n\n                                                                ";
letter_array[3]  = "\n\n\n\n\n\n\n\nC\n\n\n\n\n\n\n                                                                 ";
letter_array[4]  = "\n\n\n\n\n\n\n\nD\n\n\n\n\n\n\n                                                                ";
letter_array[5]  = "\n\n\n\n\n\n\n\nE\n\n\n\n\n\n\n                                                                ";
letter_array[6]  = "\n\n\n\n\n\n\n\nF\n\n\n\n\n\n\n                                                                ";
letter_array[7]  = "\n\n\n\n\n\n\n\nG\n\n\n\n\n\n\n                                                                ";
letter_array[8]  = "\n\n\n\n\n\n\n\nH\n\n\n\n\n\n\n                                                                ";
letter_array[9]  = "\n\n\n\n\n\n\n\nI\n\n\n\n\n\n\n                                                                 ";
letter_array[10] = "\n\n\n\n\n\n\n\nJ\n\n\n\n\n\n\n                                                                ";
letter_array[11] = "\n\n\n\n\n\n\n\nK\n\n\n\n\n\n\n                                                                 ";
letter_array[12] = "\n\n\n\n\n\n\n\nL\n\n\n\n\n\n\n                                                                 ";
letter_array[13] = "\n\n\n\n\n\n\n\nM\n\n\n\n\n\n\n                                                                 ";
letter_array[14] = "\n\n\n\n\n\n\n\nN\n\n\n\n\n\n\n                                                                ";
letter_array[15] = "\n\n\n\n\n\n\n\nO\n\n\n\n\n\n\n                                                                ";
letter_array[16] = "\n\n\n\n\n\n\n\nP\n\n\n\n\n\n\n                                                                ";
letter_array[17] = "\n\n\n\n\n\n\n\nQ\n\n\n\n\n\n\n                                                                ";
letter_array[18] = "\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n                                                                 ";
letter_array[19] = "\n\n\n\n\n\n\n\nS\n\n\n\n\n\n\n                                                                 ";
letter_array[20] = "\n\n\n\n\n\n\n\nT\n\n\n\n\n\n\n                                                                ";
letter_array[21] = "\n\n\n\n\n\n\n\nU\n\n\n\n\n\n\n                                                               ";
letter_array[22] = "\n\n\n\n\n\n\n\nV\n\n\n\n\n\n\n                                                                ";
letter_array[23] = "\n\n\n\n\n\n\n\nW\n\n\n\n\n\n\n                                                                ";
letter_array[24] = "\n\n\n\n\n\n\n\nZ\n\n\n\n\n\n\n                                                               ";#switched these because of 0-back task
letter_array[25] = "\n\n\n\n\n\n\n\nY\n\n\n\n\n\n\n                                                                ";
letter_array[26] = "\n\n\n\n\n\n\n\nX\n\n\n\n\n\n\n                                                                ";#switched these because of 0-back task

array <string> my_letters[ntrls]; #will contain all the letters
array <int> port_code_letters[ntrls]; #used for adding the correct port code to the letter

	instructions_1_trial.present();
	instructions_2_trial.present();
	instructions_3_trial.present();
	instructions_4_trial.present();
	instructions_5_trial.present();
	instructions_6_trial.present();
	instructions_7_trial.present();

loop #so that the bdf starts saving data
int start = 1;
until
start>2
begin
	start_trial.present();
	start = start +1;
end;

loop #this loop will assign all the info to each trial
int i = 5; int letter; 
until 
i > ntrls
begin
	if t_or_nt[i]== 1 then #non-target
		#port_code_letters[i]=11; #0-back
		port_code_letters[i]=21; #1-back
		#port_code_letters[i]=31; #2-back
		letter = random(1,26);
		if letter_array[letter]==my_letters[i-1] || letter_array[letter]==my_letters[i-2] || letter_array[letter]==my_letters[i-3] || letter_array[letter]==my_letters[i-4] then #check that it's the same as the used consonants
			loop #if it's the same
			letter = random(1,26);#choose new letter until
			until letter_array[letter]!=my_letters[i-1] && letter_array[letter]!=my_letters[i-2] && letter_array[letter]!=my_letters[i-3] && letter_array[letter]!=my_letters[i-4] #letter is not the same as previous letters
			begin
				letter = random(1,26);
			end;
		end;
		my_letters[i]=letter_array[letter];
	elseif t_or_nt[i]== 2 then #target
		#port_code_letters[i]=12;#0-back 
		#my_letters[i] = letter_array[26]; #0-back (has to be X)
		port_code_letters[i]=22;#1-back 
		my_letters[i] = my_letters[i-1];#1-back
		#port_code_letters[i]=32;#2-back 
		#my_letters[i] = my_letters[i-2];#2-back
	end;
	i=i+1;
end;

int i=5;
loop	 
until
	i > ntrls 
begin	
	if t_or_nt[i] == 1 then #non-target
		nt_pic.clear(); 
		nt_txt.set_caption(my_letters[i]);
		nt_txt.redraw();
		nt_pic.add_part(nt_txt,0,0);
		nt_event.set_port_code(port_code_letters[i]);
		nt_event.set_event_code(string(port_code_letters[i]));
		nt_trial.present();
		isi_nt.present();
   elseif t_or_nt[i] == 2 then #target
		t_pic.clear(); 
		t_txt.set_caption(my_letters[i]);
		t_txt.redraw();
		t_pic.add_part(t_txt,0,0);
		t_event.set_port_code(port_code_letters[i]);
		t_event.set_event_code(string(port_code_letters[i]));
		t_trial.present();
		isi_t.present();
	end;
	i=i+1;
end;