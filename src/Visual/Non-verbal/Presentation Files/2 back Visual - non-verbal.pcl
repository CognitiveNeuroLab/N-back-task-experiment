##ET##
eye_tracker EyeLink = new eye_tracker( "PresLink" );#this starts the eyetracker , the name of this (currently "PresLink") is whatever your extention is called (sometimes "EyeTracker")
int dummy_mode = 0; #if this is 1 you can run the paradigm without eyetracking
if dummy_mode == 1 then
	EyeLink.set_parameter("tracker_address", "");
end;         
#connect to Eyelink tracker.
EyeLink.start_tracking();
string edfname_final = logfile.subject() + "NBv_nv_1"; #names the EDF file, choose here the name of your individual edf file
string edfname_out = "NBv_nv_1";

#here we are checking if the edf file already exists and if so it add a +1 to the ending
int cntr = 1;
loop
	bool good_edfname = false; 
until
	good_edfname == true
begin
	if file_exists(logfile_directory + edfname_final + ".edf") then
		cntr = cntr + 1;
		edfname_final = logfile.subject() + "NBv_nv_1" + string(cntr); # + ".edf";
		edfname_out = "NBv_nv_1" + string(cntr) 
	else
		good_edfname = true
	end;
end;

if edfname_out.count() > 8 then
	exit("EDF Filename needs to be smaller than 8 characters long (letters, numbers and underscores only)"); #if your EDF filename is longer it might start giving trouble specially if you do more than 9 blocks
end;
array<string> temp[0];
edfname_out.split(".", temp);
edfname_out = temp[1];
EyeLink.set_parameter("open_edf_file",edfname_out+".edf");
int display_height = display_device.height();
int display_width  = display_device.width();
EyeLink.send_command("screen_pixel_coords 0 0 " + string(display_width-1) + 
	" " + string(display_height-1));
EyeLink.send_message("DISPLAY_COORDS " + "0 0 " + string(display_width-1) + 
	" " + string(display_height-1)); 
string Eyelink_ver = EyeLink.get_parameter("tracker_version"); # get et version
array <string> string_array[5];
Eyelink_ver.split(" ",string_array);
double el_v = double(string_array[3]); 
EyeLink.send_command("file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT");	#this ensures that Gaze data is recorded 
EyeLink.send_command("link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,BUTTON,INPUT");
if (el_v >=4.0) then
	EyeLink.send_command("file_sample_data = LEFT,RIGHT,GAZE,AREA,GAZERES,STATUS,HTARGET,INPUT"); #Area token ensures Pupil size is recorded.
	EyeLink.send_command("link_sample_data = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,HTARGET,INPUT");
else
	EyeLink.send_command("file_sample_data = LEFT,RIGHT,GAZE,AREA,GAZERES,STATUS,INPUT");
	EyeLink.send_command("link_sample_data = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT"); 
end;
EyeLink.calibrate( et_calibrate_default, 1.0, 0.0, 0.0 );
sub cleanup begin
	EyeLink.send_command("set_idle_mode"); #eyelink goes in idle mode
	EyeLink.send_command("clear_screen 0");#clear Host PC screen at end of session
	wait_interval(500); 
	EyeLink.send_command("close_data_file");#close the EDF file and then allow 100 msec to ensure it's closed
	if dummy_mode != 1 then
		EyeLink.set_parameter("get_edf_file",logfile_directory + edfname_final + ".edf");#transfer the EDF file to the logfile directory of the experiment	on the Display PC
	end;
	EyeLink.stop_tracking();
end;	
EyeLink.send_command("set_idle_mode");
wait_interval(50);#in ms
EyeLink.send_command("clear_screen 0"); #clearing screen
EyeLink.set_parameter("transfer_image", et_bit.filename()); #this will be on the hostpc's screen
##################### ET #######################
int ntrls = 100; # number of trials (needs to be devidable by 5) 
string direc = scenario_directory;
array <int> t_or_nt[ntrls];# array to be filled from pre-made sequence text files
input_file order_in = new input_file;# Read-in the trial order
string file_path = direc + "sequences//" + printf(random(1,50),"n-back_sequence_%d.txt");
#string file_path = direc + "sequences//" + printf(1,"n-back_sequence_%d.txt");
order_in.open(file_path);
order_in.set_delimiter( '\n' ); # for get_line()		
loop
int i = 1; 
until
i > ntrls
begin
	t_or_nt[i] = order_in.get_int();
	i = i+1;
end;

order_in.close();

array <bitmap> pic_location[8];
pic_location[1] = pic_2;
pic_location[2] = pic_3;
pic_location[3] = pic_4;
pic_location[4] = pic_5;
pic_location[5] = pic_6;
pic_location[6] = pic_7;
pic_location[7] = pic_8;
pic_location[8] = pic_9;


array <string> my_letters[ntrls]; #will contain all the letters
array <bitmap> my_locations[ntrls]; #will contain all the letters
array <int> port_code_location[ntrls]; #used for adding the correct port code to the location

instruction_trial.present(); # to make clear the difference between the 0-1-2 back tasks
loop #so that the bdf starts saving data
int start = 1;
until
start>2
begin
	start_trial.present();
	start = start +1;
end;
wait_trial.present();
loop #this loop will assign all the info to each trial
int i = 5; int location; 
until 
i > ntrls
begin
	if t_or_nt[i]== 1 then #non-target
		#port_code_location[i]=11; #0-back
		#port_code_location[i]=21; #1-back
		port_code_location[i]=31; #2-back
		location = random(1,8); #because it's NOT 0-back it can be any location
		if pic_location[location]==my_locations[i-1] || pic_location[location]==my_locations[i-2] || pic_location[location]==my_locations[i-3] || pic_location[location]==my_locations[i-4] then
			loop #if it's the same
			location = random(1,8);;#choose new location until
			until pic_location[location]!=my_locations[i-1] && pic_location[location]!=my_locations[i-2] && pic_location[location]!=my_locations[i-3] && pic_location[location]!=my_locations[i-4] #location is not the same as previous locations
			begin
				location = random(1,8);
			end;
		end;
		my_locations[i]=pic_location[location];
	elseif t_or_nt[i]== 2 then #target
		#port_code_location[i]=12;#0-back 
		#my_locations[i]=pic_location[1]; #0-back, so it's always left top corner
		#port_code_location[i]=22;#1-back 
		#my_locations[i] = my_locations[i-1];#1-back
		port_code_location[i]=32;#2-back 
		my_locations[i] = my_locations[i-2];#2-back
	end;
	i=i+1;
end;

int i=5;
loop	 
until
	i > ntrls 
begin
	### ET ###
	EyeLink.send_command("record_status_message 'V 0-back " + string(i) + "/100 start'");	
	EyeLink.send_string( "TRIALID " + string(i));
	### ET ###
	if t_or_nt[i] == 1 then #non-target
		nontarget.clear(); #clearing picture
		nontarget.add_part(my_locations[i], 0 , 0); #adding correct stimuli picture
		code_nt_event.set_port_code(port_code_location[i]); #adding correct portcode
		code_nt_event.set_event_code(string(port_code_location[i])); #creating a string and using it as event code
		EyeLink.send_message("nontarget_onset"); # put this in the line before you present your stimulus in the PCL file
		nt_trial.present(); # presenting 
   elseif t_or_nt[i] == 2 then #target
		target.clear(); 
		target.add_part(my_locations[i], 0 , 0);
		code_t_event.set_port_code(port_code_location[i]);
		code_t_event.set_event_code(string(port_code_location[i]));
		EyeLink.send_message("target_onset"); # put this in the line before you present your stimulus in the PCL file
		t_trial.present();
	end;
	isi_trial.present();
	i=i+1;
	EyeLink.send_command("record_status_message 'EndTrial'");
	EyeLink.send_message("TRIAL_RESULT 0");
end;
end_trial.present();
end_trial.present();
cleanup();