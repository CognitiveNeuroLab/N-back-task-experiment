# 0-back

int ntrls = 100; # number of trials (needs to be devidable by 5) 
string direc = "C://Users//dohorsth//Documents//GitHub//N-back-task-experiment//src//Visual//Non-verbal//Presentation Files//";
array <int> t_or_nt[ntrls];# array to be filled from pre-made sequence text files
input_file order_in = new input_file;# Read-in the trial order
#string file_path = direc + "sequences//" + printf(random(1,50),"n-back_sequence_%d.txt");
string file_path = direc + "sequences//" + printf(1,"n-back_sequence_%d.txt");
order_in.open(file_path);
order_in.set_delimiter( '\n' ); # for get_line()		
loop
int i = 1; 
until
i > ntrls
begin
	t_or_nt[i] = order_in.get_int();
	i = i+1;
end;

order_in.close();

array <bitmap> pic_location[8];
pic_location[1] = pic_2;
pic_location[2] = pic_3;
pic_location[3] = pic_4;
pic_location[4] = pic_5;
pic_location[5] = pic_6;
pic_location[6] = pic_7;
pic_location[7] = pic_8;
pic_location[8] = pic_9;


array <string> my_letters[ntrls]; #will contain all the letters
array <bitmap> my_locations[ntrls]; #will contain all the letters
array <int> port_code_location[ntrls]; #used for adding the correct port code to the location

instruction_trial.present(); # to make clear the difference between the 0-1-2 back tasks
loop #so that the bdf starts saving data
int start = 1;
until
start>2
begin
	start_trial.present();
	start = start +1;
end;

loop #this loop will assign all the info to each trial
int i = 5; int location; 
until 
i > ntrls
begin
	if t_or_nt[i]== 1 then #non-target
		port_code_location[i]=11; #0-back
		#port_code_location[i]=21; #1-back
		#port_code_location[i]=31; #2-back
		location = random(2,8); #because it's 0-back location 1 is target
		if pic_location[location]==my_locations[i-1] || pic_location[location]==my_locations[i-2] || pic_location[location]==my_locations[i-3] || pic_location[location]==my_locations[i-4] then
			loop #if it's the same
			location = random(2,8);;#choose new location until
			until pic_location[location]!=my_locations[i-1] && pic_location[location]!=my_locations[i-2] && pic_location[location]!=my_locations[i-3] && pic_location[location]!=my_locations[i-4] #location is not the same as previous locations
			begin
				location = random(2,8);
			end;
		end;
		my_locations[i]=pic_location[location];
	elseif t_or_nt[i]== 2 then #target
		port_code_location[i]=12;#0-back 
		my_locations[i]=pic_location[1]; #0-back, so it's always left top corner
		#port_code_location[i]=22;#1-back 
		#my_locations[i] = my_locations[i-1];#1-back
		#port_code_location[i]=32;#2-back 
		#my_locations[i] = my_locations[i-2];#2-back
	end;
	i=i+1;
end;

int i=5;
loop	 
until
	i > ntrls 
begin	
	if t_or_nt[i] == 1 then #non-target
		nontarget.clear(); #clearing picture
		nontarget.add_part(my_locations[i], 0 , 0); #adding correct stimuli picture
		nt_event.set_port_code(port_code_location[i]); #adding correct portcode
		nt_event.set_event_code(string(port_code_location[i])); #creating a string and using it as event code
		nt_trial.present(); # presenting 
   elseif t_or_nt[i] == 2 then #target
		target.clear(); 
		target.add_part(my_locations[i], 0 , 0);
		t_event.set_port_code(port_code_location[i]);
		t_event.set_event_code(string(port_code_location[i]));
		t_trial.present();
	end;
	isi_trial.present();
	i=i+1;
end;